package main.ksets.kernel;

public class Filter {
	
	public static final double[] filtB = new double[]{-0.000435, -0.000561, -0.000631, -0.000618, -0.000497, 
		-0.000264, 0.000044, 0.000341, 0.000500, 0.000406, 0.000013, -0.000588, 
		-0.001129, -0.001191, -0.000304, 0.001893, 0.005458, 0.009986, 0.014549, 
		0.017796, 0.018212, 0.014512, 0.006074, -0.006704, -0.022246, -0.037930, 
		-0.050516, -0.056811, -0.054430, -0.042463, -0.021872, 0.004522, 0.032480, 
		0.057151, 0.074064, 0.080078, 0.074064, 0.057151, 0.032480, 0.004522, 
		-0.021872, -0.042463, -0.054430, -0.056811, -0.050516, -0.037930, -0.022246, 
		-0.006704, 0.006074, 0.014512, 0.018212, 0.017796, 0.014549, 0.009986, 
		0.005458, 0.001893, -0.000304, -0.001191, -0.001129, -0.000588, 0.000013, 
		0.000406, 0.000500, 0.000341, 0.000044, -0.000264, -0.000497, -0.000618, 
		-0.000631, -0.000561, -0.000435}; 

	
	public double[] k3_filt (double[] x) {
		double[] b = Filter.filtB;
		double[] a = new double[b.length];
		a[0] = 1;
		
		return filter(b, a, x);
	}
	
	public double[] filter(double[] b, double[] a, double[] x) {
		
		double[] y = new double[x.length];
		int ord = y.length > b.length ? b.length-1 : y.length-1;
		int np  = y.length -1;
		
		y[0] = b[0] * x[0];
		for (int i = 1; i < ord+1; i++) {
			y[i] = 0.0;
	        for (int j = 0; j < i+1; j++)
	        	y[i] += b[j] * x[i-j];
	        for (int j = 0; j < i; j++)
	        	y[i] -= a[j+1] * y[i-j-1];
		}
		for (int i = ord+1; i < np+1; i++) {
			y[i] = 0.0;
			for (int j = 0; j < ord+1; j++)
				y[i] += b[j] * x[i-j];
			for (int j = 0; j < ord; j++)
				y[i] -= a[j+1] * y[i-j-1];
		}
		
		return y;		
	}
	
}
